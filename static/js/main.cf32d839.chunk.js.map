{"version":3,"sources":["chatbotComponents/chatbot.jsx","App.js","index.js"],"names":["Basic","_useState","useState","_useState2","Object","slicedToArray","chat","setChat","_useState3","_useState4","inputMessage","setInputMessage","_useState5","_useState6","botTyping","setbotTyping","arr","console","log","useEffect","objDiv","document","getElementById","scrollTop","scrollHeight","_require","require","Configuration","openai","OpenAIApi","apiKey","react_default","a","createElement","className","style","maxWidth","border","paddingLeft","paddingRight","paddingTop","borderRadius","boxShadow","height","borderBottom","backgroundColor","margin","color","id","overflowY","overflowX","map","user","key","sender","push","msg","bi_index_esm","borderTop","display","onSubmit","evt","preventDefault","request_temp","sender_id","concat","toConsumableArray","window","alert","onChange","e","target","value","type","onClick","join","createCompletion","model","prompt","max_tokens","temperature","top_p","frequency_penalty","presence_penalty","stop","then","response","data","choices","item","response_temp","recipient_id","text","index_esm","App","chatbotComponents_chatbot","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.cf32d839.chunk.js","sourcesContent":["import \"./chatbot.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { IoMdSend } from \"react-icons/io\";\r\nimport { BiBot, BiUser } from \"react-icons/bi\";\r\n\r\nfunction Basic() {\r\n  const [chat, setChat] = useState([]);\r\n  const [inputMessage, setInputMessage] = useState(\"\");\r\n  const [botTyping, setbotTyping] = useState(false);\r\n  //   const [data, setData] = useState([]);\r\n  let arr = [];\r\n  //   let arru = [];\r\n\r\n  console.log(\"lav\", arr);\r\n  useEffect(() => {\r\n    // console.log(\"called\", chat);\r\n    const objDiv = document.getElementById(\"messageArea\");\r\n    objDiv.scrollTop = objDiv.scrollHeight;\r\n  }, [chat]);\r\n  console.log(\"called\", chat);\r\n\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    const name = \"lav\";\r\n    const request_temp = { sender: \"user\", sender_id: name, msg: inputMessage };\r\n    console.log(\"lav i am at submit\");\r\n    if (inputMessage !== \"\") {\r\n      setChat((chat) => [...chat, request_temp]);\r\n      // console.log(\"chat\",chat)\r\n      setbotTyping(true);\r\n      setInputMessage(\"\");\r\n      // rasaAPI(name,inputMessage);\r\n    } else {\r\n      window.alert(\"Please enter valid message\");\r\n    }\r\n  };\r\n\r\n  const { Configuration, OpenAIApi } = require(\"openai\");\r\n  const configuration = new Configuration({\r\n    apiKey: \"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\",\r\n  });\r\n  const openai = new OpenAIApi(configuration);\r\n  const getOpenAIRespoense = () => {\r\n    arr.push(\"USER:\" + inputMessage);\r\n    console.log(\"lav login arry\" + arr.join());\r\n    openai\r\n      .createCompletion({\r\n        model: \"text-davinci-003\",\r\n        prompt: arr.join() + \"\\n JAX:\",\r\n        max_tokens: 100,\r\n        temperature: 0.7,\r\n        top_p: 1.0,\r\n        frequency_penalty: 0.0,\r\n        presence_penalty: 0.0,\r\n        stop: [\"USER:\"],\r\n      })\r\n      .then((response) => {\r\n        console.log(\"lavv2\", response);\r\n        if (response.data.choices) {\r\n          response.data.choices.map((item) => {\r\n            const response_temp = {\r\n              sender: \"bot\",\r\n              recipient_id: 1,\r\n              msg: item.text,\r\n            };\r\n            setbotTyping(false);\r\n\r\n            setChat((chat) => [...chat, response_temp]);\r\n          });\r\n        }\r\n      });\r\n  };\r\n  const stylecard = {\r\n    maxWidth: \"35rem\",\r\n    border: \"1px solid black\",\r\n    paddingLeft: \"0px\",\r\n    paddingRight: \"0px\",\r\n    paddingTop: \"0px\",\r\n    borderRadius: \"30px\",\r\n    boxShadow: \"0 16px 20px 0 rgba(0,0,0,0.4)\",\r\n  };\r\n  const styleHeader = {\r\n    height: \"4.5rem\",\r\n    borderBottom: \"1px solid black\",\r\n    borderRadius: \"30px 30px 0px 0px\",\r\n    backgroundColor: \"#282c34\",\r\n  };\r\n  const styleFooter = {\r\n    //maxWidth : '32rem',\r\n    borderTop: \"1px solid black\",\r\n    borderRadius: \"0px 0px 30px 30px\",\r\n    backgroundColor: \"#282c34\",\r\n  };\r\n  const styleBody = {\r\n    paddingTop: \"10px\",\r\n    height: \"28rem\",\r\n    overflowY: \"a\",\r\n    overflowX: \"hidden\",\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container parent\">\r\n        <div className=\" flex justify-content-center allin\">\r\n          <div className=\"card child\" style={stylecard}>\r\n            <div className=\"cardHeader text-white\" style={styleHeader}>\r\n              <h1 style={{ margin: \"0px\", color: \"white\" }}>\r\n                career counselor\r\n              </h1>\r\n\r\n              {botTyping ? <h6>Bot Typing....</h6> : null}\r\n            </div>\r\n            <div className=\"cardBody\" id=\"messageArea\" style={styleBody}>\r\n              {/* {console.log(\"chat\",chat)} */}\r\n\r\n              <div className=\"row msgarea\">\r\n                {/* {console.log(\"kush\",chat)} */}\r\n                {chat.map((user, key) => {\r\n                  if (user.sender === \"bot\") {\r\n                    // arr[key]=user.msg\r\n\r\n                    arr.push(\"JAX:\" + user.msg);\r\n                    console.log(\"RESPONSE\", arr);\r\n                  }\r\n                  if (user.sender === \"user\") {\r\n                    arr[key] = user.msg;\r\n                    arr.push(\"\\n USER:\" + user.msg);\r\n                    // arr.push({...arr,user:user.msg});\r\n                    console.log(arr, \"arr\");\r\n                  }\r\n                  return (\r\n                    <div key={key}>\r\n                      {user.sender === \"bot\" ? (\r\n                        <div className=\"msgalignstart\">\r\n                          <BiBot className=\"botIcon\" />\r\n                          <h5 className=\"botmsg\">\r\n                            <div>{user.msg}</div>\r\n                          </h5>\r\n                        </div>\r\n                      ) : (\r\n                        <div className=\"msgalignend\">\r\n                          <h5 className=\"usermsg\">{user.msg}</h5>\r\n                          <BiUser className=\"userIcon\" />\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n            <div className=\"cardFooter text-white\" style={styleFooter}>\r\n              <div className=\"row\">\r\n                <form style={{ display: \"flex\" }} onSubmit={handleSubmit}>\r\n                  <div className=\"col-10\" style={{ paddingRight: \"0px\" }}>\r\n                    <input\r\n                      onChange={(e) => setInputMessage(e.target.value)}\r\n                      value={inputMessage}\r\n                      type=\"text\"\r\n                      className=\"msginp\"\r\n                    ></input>\r\n                  </div>\r\n                  <div className=\"col-2 cola\">\r\n                    <button\r\n                      type=\"submit\"\r\n                      onClick={getOpenAIRespoense}\r\n                      className=\"circleBtn\"\r\n                    >\r\n                      <IoMdSend className=\"sendBtn\" />\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Basic;\r\n","import \"./App.css\";\nimport Basic from \"./chatbotComponents/chatbot\";\nimport React from \"react\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1></h1>\n      <Basic />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}